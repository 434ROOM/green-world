# Generated by Django 5.0 on 2024-01-03 17:40

import base.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Audio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=20)),
                ('audio', models.FileField(storage=base.models.UUIDStorage, upload_to='audios/')),
                ('spectrogram', models.ImageField(blank=True, null=True, storage=base.models.UUIDStorage, upload_to='audios/spectrogram/')),
                ('spectrum_diagram', models.ImageField(blank=True, null=True, storage=base.models.UUIDStorage, upload_to='audios/spectrum_diagram/')),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=20)),
                ('photo', models.ImageField(storage=base.models.UUIDStorage, upload_to='images/')),
                ('width', models.IntegerField(null=True)),
                ('height', models.IntegerField(null=True)),
                ('grayscale', models.ImageField(blank=True, null=True, storage=base.models.UUIDStorage, upload_to='images/grayscale/')),
                ('normalization', models.ImageField(blank=True, null=True, storage=base.models.UUIDStorage, upload_to='images/normalization/')),
                ('grayscaleProcessed', models.ImageField(blank=True, null=True, storage=base.models.UUIDStorage, upload_to='images/gray/')),
                ('normalizationProcessed', models.ImageField(blank=True, null=True, storage=base.models.UUIDStorage, upload_to='images/normalized/')),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, null=True)),
                ('video_file', models.FileField(storage=base.models.UUIDStorage, upload_to='videos/')),
                ('duration', models.DurationField(null=True)),
                ('fps', models.IntegerField(null=True)),
                ('frames', models.IntegerField(null=True)),
                ('width', models.IntegerField(null=True)),
                ('height', models.IntegerField(null=True)),
                ('cover', models.ImageField(blank=True, null=True, storage=base.models.UUIDStorage, upload_to='videos/cover/')),
            ],
        ),
        migrations.CreateModel(
            name='UserData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
